# Python program to demonstrate single inheritance
# Base class


class Parent:
    def function1(self):
        print("This function1 is in Parent class.")
# Derived class
class Child(Parent):
    def function2(self):
        print("This function2 is in child class.")

object = Child()
object.function1()
object.function2()


# Python program for multiple inheritance
# Base class1
class Mother:
    mothername = ""

    def mother(self):
        print(self.mothername)


# Base class2
class Father:
    fathername = ""

    def father(self):
        print(self.fathername)


# Derived class
class Son(Mother, Father):
    def parents(self):
        print("Father :", self.fathername)
        print("Mother :", self.mothername)


s1 = Son()
s1.fathername = "Aryan"
s1.mothername = "Boom"
s1.parents()

# # Python program for multilevel inheritance
# # Base class
# class Grandfather:
#
# 	def __init__(self, grandfathername):
# 		self.grandfathername = grandfathername
#
# # Intermediate class
# class Father(Grandfather):
# 	def __init__(self, fathername, grandfathername):
# 		self.fathername = fathername
#
# 		# invoking constructor of Grandfather class
# 		Grandfather.__init__(self, grandfathername)
#
# # Derived class
# class Son(Father):
# 	def __init__(self, sonname, fathername, grandfathername):
# 		self.sonname = sonname
#
# 		# invoking constructor of Father class
# 		Father.__init__(self, fathername, grandfathername)
#
# 	def print_name(self):
# 		print('Grandfather name :', self.grandfathername)
# 		print("Father name :", self.fathername)
# 		print("Son name :", self.sonname)
#
#
# s1 = Son('Aryan', 'Aadi', 'Boom')
# print(s1.grandfathername)
# s1.print_name()
#
#
# # single inheritance
# class Emp:
#     def getdata(self):
#        self.name = input("Enter employee name: ")
#        self.dep = input("Enter department: ")
#        self.salary = input("Enter salary: ")
#     def display(self):
#        print("Employee Details: \n")
#        print("Employee name: \n",(self.name),"\nDepartment: \n",(self.dep),"\nSalary: \n ",
#             (self.salary))
# e = Emp()
# e.getdata()
# e.display()
#
#
# #multiple inheritance
# class Stud():
#   def getInfo(self):
#       self.name = input("Enter student name: ")
#       self.dep = input("Enter department: ")
#       self.rollno = input("Enter roll_no: ")
# class college():
#   def clgdetails(self):
#       self.cname=input("Enter college name: ")
# class student(Stud,college):
#    def display(self):
#       print("Student Information: ")
#       print("Student name: ",(self.name),"\t Department: ",(self.dep),"\t Rollno:",(self.rollno))
#       print("Studying in college: ",(self.cname))
# st = student()
# st.getInfo()
# st.clgdetails()
# st.display()
#
# # METHOD OVERLOADING
#
#
#
#
# class Findarea():
#
#     @dispatch(int, int)
#     def area(self, length, breadth):
#         print("Area of rectangle", length * breadth)
#
#     @dispatch(int)
#     def area(self, side):
#         print("Area of sqaure", side * side)
#
#
# f = Findarea()
# l = int(input("Enter length of rectangle:"))
# b = int(input("Enter breadth of rectangle:"))
# s = int(input("Enter side of square:"))
# f.area(l, b)
# f.area(s)
#
#
#
#
# # Python program to
# # demonstrate protected members
#
# # Creating a base class
# class Base:
#     def __init__(self):
#         # Protected member
#         self._a = 2
#
#
# # Creating a derived class
# class Derived(Base):
#     def __init__(self):
#         # Calling constructor of
#         # Base class
#         Base.__init__(self)
#         print("Calling protected member of base class: ",
#               self._a)
#
#         # Modify the protected variable:
#         self._a = 3
#         print("Calling modified protected member outside class: ",
#               self._a)
#
#
# obj1 = Derived()
#
# obj2 = Base()
#
# # Calling protected member
# # Can be accessed but should not be done due to convention
# print("Accessing protected member of obj1: ", obj1._a)
#
# # Accessing the protected variable outside
# print("Accessing protected member of obj2: ", obj2._a)
#
#
#
#
#
#
#
# # Python program to define   abstract class
#
# from abc import ABC
#
#
# class Polygon(ABC):
#
#     # abstract method
#     def sides(self):
#         pass
#
#
# class Triangle(Polygon):
#
#     def sides(self):
#         print("Triangle has 3 sides")
#
#
# class Pentagon(Polygon):
#
#     def sides(self):
#         print("Pentagon has 5 sides")
#
#
# class Hexagon(Polygon):
#
#     def sides(self):
#         print("Hexagon has 6 sides")
#
#
# class square(Polygon):
#
#     def sides(self):
#         print("I have 4 sides")
#
#     # Driver code
#
#
# t = Triangle()
# t.sides()
#
# s = square()
# s.sides()
#
# p = Pentagon()
# p.sides()
#
# K = Hexagon()
# K.sides()
